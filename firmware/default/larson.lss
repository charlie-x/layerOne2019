
larson.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .eeprom       00000002  00810000  00810000  0000012e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005bc  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004f6  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000399  00000000  00000000  00000c82  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  0000101c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000031d  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000109  00000000  00000000  00001389  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001492  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	4c c0       	rjmp	.+152    	; 0xa2 <__vector_4>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>
  22:	07 c0       	rjmp	.+14     	; 0x32 <__bad_interrupt>
  24:	06 c0       	rjmp	.+12     	; 0x32 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	02 d0       	rcall	.+4      	; 0x34 <main>
  30:	42 c0       	rjmp	.+132    	; 0xb6 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <main>:
void delay_ms ( uint16_t milliseconds )
{
	for ( ; milliseconds > 0; milliseconds-- ) {
		_delay_ms ( 1 );
	}
}
  34:	84 b7       	in	r24, 0x34	; 52
  36:	87 7f       	andi	r24, 0xF7	; 247
  38:	84 bf       	out	0x34, r24	; 52
  3a:	88 e1       	ldi	r24, 0x18	; 24
  3c:	81 bd       	out	0x21, r24	; 33
  3e:	11 bc       	out	0x21, r1	; 33
  40:	8f ef       	ldi	r24, 0xFF	; 255
  42:	8a bb       	out	0x1a, r24	; 26
  44:	97 ef       	ldi	r25, 0xF7	; 247
  46:	97 bb       	out	0x17, r25	; 23
  48:	81 bb       	out	0x11, r24	; 17
  4a:	1b ba       	out	0x1b, r1	; 27
  4c:	88 e0       	ldi	r24, 0x08	; 8
  4e:	88 bb       	out	0x18, r24	; 24
  50:	12 ba       	out	0x12, r1	; 18
  52:	81 e0       	ldi	r24, 0x01	; 1
  54:	90 e0       	ldi	r25, 0x00	; 0
  56:	28 e0       	ldi	r18, 0x08	; 8
  58:	80 fd       	sbrc	r24, 0
  5a:	c4 9a       	sbi	0x18, 4	; 24
  5c:	81 fd       	sbrc	r24, 1
  5e:	c2 9a       	sbi	0x18, 2	; 24
  60:	82 fd       	sbrc	r24, 2
  62:	c1 9a       	sbi	0x18, 1	; 24
  64:	83 fd       	sbrc	r24, 3
  66:	c0 9a       	sbi	0x18, 0	; 24
  68:	84 fd       	sbrc	r24, 4
  6a:	96 9a       	sbi	0x12, 6	; 18
  6c:	85 fd       	sbrc	r24, 5
  6e:	95 9a       	sbi	0x12, 5	; 18
  70:	86 fd       	sbrc	r24, 6
  72:	94 9a       	sbi	0x12, 4	; 18
  74:	87 fd       	sbrc	r24, 7
  76:	91 9a       	sbi	0x12, 1	; 18
  78:	90 fd       	sbrc	r25, 0
  7a:	d9 9a       	sbi	0x1b, 1	; 27
  7c:	91 fd       	sbrc	r25, 1
  7e:	d8 9a       	sbi	0x1b, 0	; 27
  80:	92 fd       	sbrc	r25, 2
  82:	92 9a       	sbi	0x12, 2	; 18
  84:	93 fd       	sbrc	r25, 3
  86:	93 9a       	sbi	0x12, 3	; 18
  88:	01 96       	adiw	r24, 0x01	; 1
  8a:	b3 9b       	sbis	0x16, 3	; 22
  8c:	fe cf       	rjmp	.-4      	; 0x8a <__SREG__+0x4b>
  8e:	eb e7       	ldi	r30, 0x7B	; 123
  90:	f2 e9       	ldi	r31, 0x92	; 146
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <__SREG__+0x53>
  96:	00 c0       	rjmp	.+0      	; 0x98 <__SREG__+0x59>
  98:	00 00       	nop
  9a:	28 bb       	out	0x18, r18	; 24
  9c:	12 ba       	out	0x12, r1	; 18
  9e:	1b ba       	out	0x1b, r1	; 27
  a0:	db cf       	rjmp	.-74     	; 0x58 <__SREG__+0x19>

000000a2 <__vector_4>:
#define NUM_ELEM(x) (sizeof (x) / sizeof (*(x)))

// this function is called when timer1 compare matches OCR1A

SIGNAL ( TIMER1_COMPA_vect  )
{
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1

}
  ac:	0f 90       	pop	r0
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	0f 90       	pop	r0
  b2:	1f 90       	pop	r1
  b4:	18 95       	reti

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
