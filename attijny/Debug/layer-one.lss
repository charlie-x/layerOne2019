
layer-one.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000658  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000658  000006ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  00800068  00800068  000006f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000724  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b55  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ec  00000000  00000000  00001309  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000521  00000000  00000000  000019f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00001f18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000400  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000063f  00000000  00000000  0000243c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002a7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
   4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
   6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
   8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
   a:	2a c0       	rjmp	.+84     	; 0x60 <__bad_interrupt>
   c:	5e c0       	rjmp	.+188    	; 0xca <__vector_6>
   e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
  10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
  12:	26 c0       	rjmp	.+76     	; 0x60 <__bad_interrupt>
  14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
  16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
  18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
  1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
  1c:	21 c0       	rjmp	.+66     	; 0x60 <__bad_interrupt>
  1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
  20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
  22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
  24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
  26:	1c c0       	rjmp	.+56     	; 0x60 <__bad_interrupt>
  28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d1 e0       	ldi	r29, 0x01	; 1
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	e8 e5       	ldi	r30, 0x58	; 88
  3e:	f6 e0       	ldi	r31, 0x06	; 6
  40:	02 c0       	rjmp	.+4      	; 0x46 <__SREG__+0x7>
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0
  46:	a8 36       	cpi	r26, 0x68	; 104
  48:	b1 07       	cpc	r27, r17
  4a:	d9 f7       	brne	.-10     	; 0x42 <__SREG__+0x3>

0000004c <__do_clear_bss>:
  4c:	20 e0       	ldi	r18, 0x00	; 0
  4e:	a8 e6       	ldi	r26, 0x68	; 104
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
  54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
  56:	a8 39       	cpi	r26, 0x98	; 152
  58:	b2 07       	cpc	r27, r18
  5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
  5c:	e0 d1       	rcall	.+960    	; 0x41e <main>
  5e:	fa c2       	rjmp	.+1524   	; 0x654 <_exit>

00000060 <__bad_interrupt>:
  60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <StripLights_Pixel>:

////////////////////////////////////////////////////////////////////////////////////////////

void StripLights_Pixel ( uint8_t x, uint32_t color )
{	
    if ( x >= 0 && x < StripLights_MAX_X  ) {
  62:	8e 30       	cpi	r24, 0x0E	; 14
  64:	88 f5       	brcc	.+98     	; 0xc8 <StripLights_Pixel+0x66>
        data[ ( x * 3 )     ] = (color       & 0xFF) >> 3 ;
  66:	28 2f       	mov	r18, r24
  68:	30 e0       	ldi	r19, 0x00	; 0
  6a:	28 0f       	add	r18, r24
  6c:	31 1d       	adc	r19, r1
  6e:	28 0f       	add	r18, r24
  70:	31 1d       	adc	r19, r1
  72:	f9 01       	movw	r30, r18
  74:	e2 59       	subi	r30, 0x92	; 146
  76:	ff 4f       	sbci	r31, 0xFF	; 255
  78:	db 01       	movw	r26, r22
  7a:	ca 01       	movw	r24, r20
  7c:	99 27       	eor	r25, r25
  7e:	aa 27       	eor	r26, r26
  80:	bb 27       	eor	r27, r27
  82:	68 94       	set
  84:	12 f8       	bld	r1, 2
  86:	b6 95       	lsr	r27
  88:	a7 95       	ror	r26
  8a:	97 95       	ror	r25
  8c:	87 95       	ror	r24
  8e:	16 94       	lsr	r1
  90:	d1 f7       	brne	.-12     	; 0x86 <StripLights_Pixel+0x24>
  92:	80 83       	st	Z, r24
        data[ ( x * 3 ) + 1 ] = (color >>  8 & 0xFF) >> 3 ;
  94:	85 2f       	mov	r24, r21
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	a0 e0       	ldi	r26, 0x00	; 0
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	68 94       	set
  9e:	12 f8       	bld	r1, 2
  a0:	b6 95       	lsr	r27
  a2:	a7 95       	ror	r26
  a4:	97 95       	ror	r25
  a6:	87 95       	ror	r24
  a8:	16 94       	lsr	r1
  aa:	d1 f7       	brne	.-12     	; 0xa0 <StripLights_Pixel+0x3e>
  ac:	81 83       	std	Z+1, r24	; 0x01
        data[ ( x * 3 ) + 2 ] = (color >> 16 & 0xFF) >> 3 ;
  ae:	86 2f       	mov	r24, r22
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	a0 e0       	ldi	r26, 0x00	; 0
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	68 94       	set
  b8:	12 f8       	bld	r1, 2
  ba:	b6 95       	lsr	r27
  bc:	a7 95       	ror	r26
  be:	97 95       	ror	r25
  c0:	87 95       	ror	r24
  c2:	16 94       	lsr	r1
  c4:	d1 f7       	brne	.-12     	; 0xba <StripLights_Pixel+0x58>
  c6:	82 83       	std	Z+2, r24	; 0x02
  c8:	08 95       	ret

000000ca <__vector_6>:
////////////////////////////////////////////////////////////////////////////////////////////

static  uint8_t mode = 0;

ISR ( TIMER0_OVF_vect )
{
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	2f 93       	push	r18
  d6:	3f 93       	push	r19
  d8:	4f 93       	push	r20
  da:	5f 93       	push	r21
  dc:	6f 93       	push	r22
  de:	7f 93       	push	r23
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	af 93       	push	r26
  e6:	bf 93       	push	r27
  e8:	ef 93       	push	r30
  ea:	ff 93       	push	r31
    if ( ++counter > 30 ) {
  ec:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <counter>
  f0:	8f 5f       	subi	r24, 0xFF	; 255
  f2:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <counter>
  f6:	8f 31       	cpi	r24, 0x1F	; 31
  f8:	08 f4       	brcc	.+2      	; 0xfc <__vector_6+0x32>
  fa:	52 c0       	rjmp	.+164    	; 0x1a0 <__stack+0x41>

        // second counter to control rgb rainbow effect
        if ( ++counter2 > 60 ) {
  fc:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <counter2>
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <counter2>
 106:	8d 33       	cpi	r24, 0x3D	; 61
 108:	88 f0       	brcs	.+34     	; 0x12c <__vector_6+0x62>

            effectLength++;
 10a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <effectLength>
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <effectLength>

            counter2 = 0;
 114:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <counter2>
            SWITCH_BIT ( PORTB , 3 );
 118:	98 b3       	in	r25, 0x18	; 24
 11a:	88 e0       	ldi	r24, 0x08	; 8
 11c:	89 27       	eor	r24, r25
 11e:	88 bb       	out	0x18, r24	; 24

            mode = rand() % 3;
 120:	55 d2       	rcall	.+1194   	; 0x5cc <rand>
 122:	63 e0       	ldi	r22, 0x03	; 3
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	bf d1       	rcall	.+894    	; 0x4a6 <__divmodhi4>
 128:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <mode>
 12c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <rotate>
 130:	88 0f       	add	r24, r24
 132:	81 1d       	adc	r24, r1
        }

        // rotate around
        rotate = rotl32a ( rotate , 1 );
 134:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <rotate>

        // reset rotate when we hit this bit position.
        if ( rotate == B8 ( 1000000 ) ) { rotate  = 1;}
 138:	80 34       	cpi	r24, 0x40	; 64
 13a:	21 f4       	brne	.+8      	; 0x144 <__vector_6+0x7a>
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <rotate>
 142:	02 c0       	rjmp	.+4      	; 0x148 <__vector_6+0x7e>

        if ( bit_get ( rotate, _BV ( 0 ) ) ) {
 144:	80 ff       	sbrs	r24, 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <__vector_6+0x82>
            bit_set ( PORTD, _BV ( RED_LED_0 ) );
 148:	92 9a       	sbi	0x12, 2	; 18
 14a:	01 c0       	rjmp	.+2      	; 0x14e <__vector_6+0x84>
        } else {
            bit_clear ( PORTD, _BV ( RED_LED_0 ) );
 14c:	92 98       	cbi	0x12, 2	; 18
        }

        if ( bit_get ( rotate, _BV ( 1 ) ) ) {
 14e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <rotate>
 152:	81 ff       	sbrs	r24, 1
 154:	02 c0       	rjmp	.+4      	; 0x15a <__vector_6+0x90>
            bit_set ( PORTD, _BV ( RED_LED_1 ) );
 156:	93 9a       	sbi	0x12, 3	; 18
 158:	01 c0       	rjmp	.+2      	; 0x15c <__vector_6+0x92>
        } else {
            bit_clear ( PORTD, _BV ( RED_LED_1 ) );
 15a:	93 98       	cbi	0x12, 3	; 18
        }

        if ( bit_get ( rotate, _BV ( 2 ) ) ) {
 15c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <rotate>
 160:	82 ff       	sbrs	r24, 2
 162:	02 c0       	rjmp	.+4      	; 0x168 <__stack+0x9>
            bit_set ( PORTD, _BV ( RED_LED_2 ) );
 164:	94 9a       	sbi	0x12, 4	; 18
 166:	01 c0       	rjmp	.+2      	; 0x16a <__stack+0xb>
        } else {
            bit_clear ( PORTD, _BV ( RED_LED_2 ) );
 168:	94 98       	cbi	0x12, 4	; 18
        }

        if ( bit_get ( rotate, _BV ( 3 ) ) ) {
 16a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <rotate>
 16e:	83 ff       	sbrs	r24, 3
 170:	02 c0       	rjmp	.+4      	; 0x176 <__stack+0x17>
            bit_set ( PORTD, _BV ( RED_LED_3 ) );
 172:	95 9a       	sbi	0x12, 5	; 18
 174:	01 c0       	rjmp	.+2      	; 0x178 <__stack+0x19>
        } else {
            bit_clear ( PORTD, _BV ( RED_LED_3 ) );
 176:	95 98       	cbi	0x12, 5	; 18
        }

        if ( bit_get ( rotate, _BV ( 4 ) ) ) {
 178:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <rotate>
 17c:	84 ff       	sbrs	r24, 4
 17e:	02 c0       	rjmp	.+4      	; 0x184 <__stack+0x25>
            bit_set ( PORTD, _BV ( RED_LED_4 ) );
 180:	96 9a       	sbi	0x12, 6	; 18
 182:	01 c0       	rjmp	.+2      	; 0x186 <__stack+0x27>
        } else {
            bit_clear ( PORTD, _BV ( RED_LED_4 ) );
 184:	96 98       	cbi	0x12, 6	; 18
        }

        if ( bit_get ( rotate, _BV ( 5 ) ) ) {
 186:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <rotate>
 18a:	85 ff       	sbrs	r24, 5
 18c:	02 c0       	rjmp	.+4      	; 0x192 <__stack+0x33>
            bit_set ( PORTB, _BV ( RED_LED_5 ) );
 18e:	c0 9a       	sbi	0x18, 0	; 24
 190:	01 c0       	rjmp	.+2      	; 0x194 <__stack+0x35>
        } else {
            bit_clear ( PORTB, _BV ( RED_LED_5 ) );
 192:	c0 98       	cbi	0x18, 0	; 24
        }

        SWITCH_BIT ( PORTB , 2 );
 194:	98 b3       	in	r25, 0x18	; 24
 196:	84 e0       	ldi	r24, 0x04	; 4
 198:	89 27       	eor	r24, r25
 19a:	88 bb       	out	0x18, r24	; 24
 
		//reset the counter
        counter = 0;
 19c:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <counter>
    }
}
 1a0:	ff 91       	pop	r31
 1a2:	ef 91       	pop	r30
 1a4:	bf 91       	pop	r27
 1a6:	af 91       	pop	r26
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	7f 91       	pop	r23
 1ae:	6f 91       	pop	r22
 1b0:	5f 91       	pop	r21
 1b2:	4f 91       	pop	r20
 1b4:	3f 91       	pop	r19
 1b6:	2f 91       	pop	r18
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <Wheel>:
{
    return ( ( ( uint32_t ) ( r ) << 16 ) | ( ( uint32_t ) ( g ) <<  8 ) | ( b ) );
}

uint32_t Wheel ( uint8_t WheelPos )
{
 1c2:	0f 93       	push	r16
 1c4:	1f 93       	push	r17
    WheelPos = 255 - WheelPos;
 1c6:	80 95       	com	r24

    if ( WheelPos < 85 ) {
 1c8:	85 35       	cpi	r24, 0x55	; 85
 1ca:	a8 f4       	brcc	.+42     	; 0x1f6 <Wheel+0x34>
    }
}

uint32_t inline newColor ( uint8_t r, uint8_t g, uint8_t b )
{
    return ( ( ( uint32_t ) ( r ) << 16 ) | ( ( uint32_t ) ( g ) <<  8 ) | ( b ) );
 1cc:	98 2f       	mov	r25, r24
 1ce:	99 0f       	add	r25, r25
 1d0:	99 0f       	add	r25, r25
 1d2:	48 2f       	mov	r20, r24
 1d4:	49 1b       	sub	r20, r25
 1d6:	41 50       	subi	r20, 0x01	; 1
 1d8:	50 e0       	ldi	r21, 0x00	; 0
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	ba 01       	movw	r22, r20
 1e0:	55 27       	eor	r21, r21
 1e2:	44 27       	eor	r20, r20
 1e4:	98 2f       	mov	r25, r24
 1e6:	99 0f       	add	r25, r25
 1e8:	89 0f       	add	r24, r25
 1ea:	8a 01       	movw	r16, r20
 1ec:	9b 01       	movw	r18, r22
 1ee:	08 2b       	or	r16, r24
 1f0:	c9 01       	movw	r24, r18
 1f2:	b8 01       	movw	r22, r16
uint32_t Wheel ( uint8_t WheelPos )
{
    WheelPos = 255 - WheelPos;

    if ( WheelPos < 85 ) {
        return newColor ( 255 - WheelPos * 3, 0, WheelPos * 3 );
 1f4:	2c c0       	rjmp	.+88     	; 0x24e <Wheel+0x8c>
    }

    if ( WheelPos < 170 ) {
 1f6:	8a 3a       	cpi	r24, 0xAA	; 170
 1f8:	b8 f4       	brcc	.+46     	; 0x228 <Wheel+0x66>
        WheelPos -= 85;
 1fa:	85 55       	subi	r24, 0x55	; 85
    }
}

uint32_t inline newColor ( uint8_t r, uint8_t g, uint8_t b )
{
    return ( ( ( uint32_t ) ( r ) << 16 ) | ( ( uint32_t ) ( g ) <<  8 ) | ( b ) );
 1fc:	48 2f       	mov	r20, r24
 1fe:	44 0f       	add	r20, r20
 200:	48 0f       	add	r20, r24
 202:	50 e0       	ldi	r21, 0x00	; 0
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	76 2f       	mov	r23, r22
 20a:	65 2f       	mov	r22, r21
 20c:	54 2f       	mov	r21, r20
 20e:	44 27       	eor	r20, r20
 210:	98 2f       	mov	r25, r24
 212:	99 0f       	add	r25, r25
 214:	99 0f       	add	r25, r25
 216:	89 1b       	sub	r24, r25
 218:	9f ef       	ldi	r25, 0xFF	; 255
 21a:	98 0f       	add	r25, r24
 21c:	8a 01       	movw	r16, r20
 21e:	9b 01       	movw	r18, r22
 220:	09 2b       	or	r16, r25
 222:	c9 01       	movw	r24, r18
 224:	b8 01       	movw	r22, r16
        return newColor ( 255 - WheelPos * 3, 0, WheelPos * 3 );
    }

    if ( WheelPos < 170 ) {
        WheelPos -= 85;
        return newColor ( 0, WheelPos * 3, 255 - WheelPos * 3 );
 226:	13 c0       	rjmp	.+38     	; 0x24e <Wheel+0x8c>
    }

    WheelPos -= 170;
 228:	8a 5a       	subi	r24, 0xAA	; 170
    }
}

uint32_t inline newColor ( uint8_t r, uint8_t g, uint8_t b )
{
    return ( ( ( uint32_t ) ( r ) << 16 ) | ( ( uint32_t ) ( g ) <<  8 ) | ( b ) );
 22a:	98 2f       	mov	r25, r24
 22c:	99 0f       	add	r25, r25
 22e:	99 0f       	add	r25, r25
 230:	28 2f       	mov	r18, r24
 232:	29 1b       	sub	r18, r25
 234:	21 50       	subi	r18, 0x01	; 1
 236:	68 2f       	mov	r22, r24
 238:	66 0f       	add	r22, r22
 23a:	86 0f       	add	r24, r22
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	a0 e0       	ldi	r26, 0x00	; 0
 240:	b0 e0       	ldi	r27, 0x00	; 0
 242:	dc 01       	movw	r26, r24
 244:	99 27       	eor	r25, r25
 246:	88 27       	eor	r24, r24
 248:	bc 01       	movw	r22, r24
 24a:	cd 01       	movw	r24, r26
 24c:	72 2b       	or	r23, r18
        return newColor ( 0, WheelPos * 3, 255 - WheelPos * 3 );
    }

    WheelPos -= 170;
    return newColor ( WheelPos * 3, 255 - WheelPos * 3, 0 );
}
 24e:	1f 91       	pop	r17
 250:	0f 91       	pop	r16
 252:	08 95       	ret

00000254 <Rainbow>:

void Rainbow ( uint32_t length , uint32_t effectLengthR )
{
 254:	8f 92       	push	r8
 256:	9f 92       	push	r9
 258:	af 92       	push	r10
 25a:	bf 92       	push	r11
 25c:	cf 92       	push	r12
 25e:	df 92       	push	r13
 260:	ef 92       	push	r14
 262:	ff 92       	push	r15
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
    static uint16_t  x = 0;

    x += 1;
 26a:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 26e:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 272:	31 96       	adiw	r30, 0x01	; 1

    if ( x == ( 256 * 5 ) ) {
 274:	e1 15       	cp	r30, r1
 276:	a5 e0       	ldi	r26, 0x05	; 5
 278:	fa 07       	cpc	r31, r26
 27a:	29 f0       	breq	.+10     	; 0x286 <Rainbow+0x32>

void Rainbow ( uint32_t length , uint32_t effectLengthR )
{
    static uint16_t  x = 0;

    x += 1;
 27c:	f0 93 69 00 	sts	0x0069, r31	; 0x800069 <__data_end+0x1>
 280:	e0 93 68 00 	sts	0x0068, r30	; 0x800068 <__data_end>
 284:	04 c0       	rjmp	.+8      	; 0x28e <Rainbow+0x3a>

    if ( x == ( 256 * 5 ) ) {
        x = 0;
 286:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__data_end+0x1>
 28a:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
    }

    for ( uint8_t i = 0 ; i < length ; i++ ) {
 28e:	61 15       	cp	r22, r1
 290:	71 05       	cpc	r23, r1
 292:	81 05       	cpc	r24, r1
 294:	91 05       	cpc	r25, r1
 296:	19 f1       	breq	.+70     	; 0x2de <Rainbow+0x8a>
 298:	49 01       	movw	r8, r18
 29a:	5a 01       	movw	r10, r20
 29c:	6b 01       	movw	r12, r22
 29e:	7c 01       	movw	r14, r24
 2a0:	10 e0       	ldi	r17, 0x00	; 0

        uint32_t color = Wheel ( ( ( i * 256 ) / effectLengthR + x ) & 0xFF );
 2a2:	c8 e6       	ldi	r28, 0x68	; 104
 2a4:	d0 e0       	ldi	r29, 0x00	; 0
 2a6:	61 2f       	mov	r22, r17
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	76 2f       	mov	r23, r22
 2ac:	66 27       	eor	r22, r22
 2ae:	07 2e       	mov	r0, r23
 2b0:	00 0c       	add	r0, r0
 2b2:	88 0b       	sbc	r24, r24
 2b4:	99 0b       	sbc	r25, r25
 2b6:	a5 01       	movw	r20, r10
 2b8:	94 01       	movw	r18, r8
 2ba:	08 d1       	rcall	.+528    	; 0x4cc <__udivmodsi4>
 2bc:	88 81       	ld	r24, Y
 2be:	82 0f       	add	r24, r18
 2c0:	80 df       	rcall	.-256    	; 0x1c2 <Wheel>
 2c2:	ab 01       	movw	r20, r22
 2c4:	bc 01       	movw	r22, r24

        StripLights_Pixel ( i, color );
 2c6:	81 2f       	mov	r24, r17
 2c8:	cc de       	rcall	.-616    	; 0x62 <StripLights_Pixel>

    if ( x == ( 256 * 5 ) ) {
        x = 0;
    }

    for ( uint8_t i = 0 ; i < length ; i++ ) {
 2ca:	1f 5f       	subi	r17, 0xFF	; 255
 2cc:	81 2f       	mov	r24, r17
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	a0 e0       	ldi	r26, 0x00	; 0
 2d2:	b0 e0       	ldi	r27, 0x00	; 0
 2d4:	8c 15       	cp	r24, r12
 2d6:	9d 05       	cpc	r25, r13
 2d8:	ae 05       	cpc	r26, r14
 2da:	bf 05       	cpc	r27, r15
 2dc:	20 f3       	brcs	.-56     	; 0x2a6 <Rainbow+0x52>

        uint32_t color = Wheel ( ( ( i * 256 ) / effectLengthR + x ) & 0xFF );

        StripLights_Pixel ( i, color );
    }
}
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	1f 91       	pop	r17
 2e4:	ff 90       	pop	r15
 2e6:	ef 90       	pop	r14
 2e8:	df 90       	pop	r13
 2ea:	cf 90       	pop	r12
 2ec:	bf 90       	pop	r11
 2ee:	af 90       	pop	r10
 2f0:	9f 90       	pop	r9
 2f2:	8f 90       	pop	r8
 2f4:	08 95       	ret

000002f6 <send>:
* The port is determined by the macro WS2811_PORT, but the actual pin to
* be used is an argument to this function. This allows a single instance of this function
* to control up to 8 separate channels.
*/
void send ( const void *values, uint16_t array_size, uint8_t bit )
{
 2f6:	fc 01       	movw	r30, r24
    const uint8_t mask = _BV ( bit );
 2f8:	21 e0       	ldi	r18, 0x01	; 1
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <send+0xc>
 2fe:	22 0f       	add	r18, r18
 300:	33 1f       	adc	r19, r19
 302:	4a 95       	dec	r20
 304:	e2 f7       	brpl	.-8      	; 0x2fe <send+0x8>
    uint8_t low_val = WS2811_PORT & ( ~mask );
 306:	92 b3       	in	r25, 0x12	; 18
 308:	82 2f       	mov	r24, r18
 30a:	80 95       	com	r24
 30c:	98 23       	and	r25, r24
    uint8_t high_val = WS2811_PORT | mask;
 30e:	82 b3       	in	r24, 0x12	; 18
    uint16_t size = array_size * sizeof ( rgb ); // size in bytes


// reset the controllers by pulling the data line low
    uint8_t bitcount = 7;
    WS2811_PORT = low_val;
 310:	92 bb       	out	0x12, r25	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 312:	3b e6       	ldi	r19, 0x6B	; 107
 314:	3a 95       	dec	r19
 316:	f1 f7       	brne	.-4      	; 0x314 <send+0x1e>
// there's extra work to be done (loading the next byte), which needs to be carefully placed
// in the time between toggling the output pins.
//
// The two-digit suffix of labels shows the "phase" of the signal at the time
// of the execution, 00 being the first clock tick of the bit and 09 being the last.
    asm volatile (
 318:	28 2b       	or	r18, r24
 31a:	ab 01       	movw	r20, r22
 31c:	44 0f       	add	r20, r20
 31e:	55 1f       	adc	r21, r21
 320:	da 01       	movw	r26, r20
 322:	a6 0f       	add	r26, r22
 324:	b7 1f       	adc	r27, r23
 326:	87 e0       	ldi	r24, 0x07	; 7

00000328 <start>:
 328:	87 e0       	ldi	r24, 0x07	; 7
 32a:	01 90       	ld	r0, Z+

0000032c <cont06>:
	...

0000032e <cont07>:
 32e:	00 00       	nop
 330:	92 bb       	out	0x12, r25	; 18

00000332 <cont09>:
 332:	00 0c       	add	r0, r0

00000334 <s00>:
 334:	22 bb       	out	0x12, r18	; 18
 336:	08 f0       	brcs	.+2      	; 0x33a <skip03>
 338:	92 bb       	out	0x12, r25	; 18

0000033a <skip03>:
 33a:	81 50       	subi	r24, 0x01	; 1
 33c:	b9 f7       	brne	.-18     	; 0x32c <cont06>
 33e:	00 0c       	add	r0, r0
 340:	40 f4       	brcc	.+16     	; 0x352 <Lx008>
 342:	87 e0       	ldi	r24, 0x07	; 7
 344:	92 bb       	out	0x12, r25	; 18
 346:	00 00       	nop
 348:	22 bb       	out	0x12, r18	; 18
 34a:	11 97       	sbiw	r26, 0x01	; 1
 34c:	01 90       	ld	r0, Z+
 34e:	79 f7       	brne	.-34     	; 0x32e <cont07>
 350:	08 c0       	rjmp	.+16     	; 0x362 <brk18>

00000352 <Lx008>:
 352:	92 bb       	out	0x12, r25	; 18
 354:	87 e0       	ldi	r24, 0x07	; 7
 356:	22 bb       	out	0x12, r18	; 18
 358:	00 00       	nop
 35a:	92 bb       	out	0x12, r25	; 18
 35c:	11 97       	sbiw	r26, 0x01	; 1
 35e:	01 90       	ld	r0, Z+
 360:	41 f7       	brne	.-48     	; 0x332 <cont09>

00000362 <brk18>:
 362:	92 bb       	out	0x12, r25	; 18
 364:	08 95       	ret

00000366 <Larson>:
}

static int8_t pos = 0, dir = 1; // Position, direction of "eye"

void Larson ( uint8_t count  )
{
 366:	0f 93       	push	r16
 368:	1f 93       	push	r17
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
    for ( uint8_t j = 0; j < count; j++ ) {
 36e:	88 23       	and	r24, r24
 370:	09 f4       	brne	.+2      	; 0x374 <Larson+0xe>
 372:	50 c0       	rjmp	.+160    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 374:	18 2f       	mov	r17, r24
 376:	d0 e0       	ldi	r29, 0x00	; 0
            pos = 1;
            dir = -dir;

        } else
            if ( pos >= StripLights_MAX_X ) {
                pos = StripLights_MAX_X - 2;
 378:	0c e0       	ldi	r16, 0x0C	; 12
{
    for ( uint8_t j = 0; j < count; j++ ) {

        // Draw 5 pixels centered on pos.  setPixelColor() will clip any
        // pixels off the ends of the strip, we don't need to watch for that.
        StripLights_Pixel ( pos - 2, 	RGB ( 0x10, 0x00, 0x00 ) ); // Dark red
 37a:	c0 91 6a 00 	lds	r28, 0x006A	; 0x80006a <pos>
 37e:	40 e0       	ldi	r20, 0x00	; 0
 380:	50 e0       	ldi	r21, 0x00	; 0
 382:	60 e1       	ldi	r22, 0x10	; 16
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	8e ef       	ldi	r24, 0xFE	; 254
 388:	8c 0f       	add	r24, r28
 38a:	6b de       	rcall	.-810    	; 0x62 <StripLights_Pixel>
        StripLights_Pixel ( pos - 1, 	RGB ( 0x80, 0x00, 0x00 ) ); // Medium red
 38c:	40 e0       	ldi	r20, 0x00	; 0
 38e:	50 e0       	ldi	r21, 0x00	; 0
 390:	60 e8       	ldi	r22, 0x80	; 128
 392:	70 e0       	ldi	r23, 0x00	; 0
 394:	8f ef       	ldi	r24, 0xFF	; 255
 396:	8c 0f       	add	r24, r28
 398:	64 de       	rcall	.-824    	; 0x62 <StripLights_Pixel>
        StripLights_Pixel ( pos, 		RGB ( 0xFF, 0x30, 0x00 ) ); // Center pixel is brightest
 39a:	40 e3       	ldi	r20, 0x30	; 48
 39c:	50 e0       	ldi	r21, 0x00	; 0
 39e:	6f ef       	ldi	r22, 0xFF	; 255
 3a0:	70 e0       	ldi	r23, 0x00	; 0
 3a2:	8c 2f       	mov	r24, r28
 3a4:	5e de       	rcall	.-836    	; 0x62 <StripLights_Pixel>
        StripLights_Pixel ( pos + 1, 	RGB ( 0x80, 0x00, 0x00 ) ); // Medium red
 3a6:	40 e0       	ldi	r20, 0x00	; 0
 3a8:	50 e0       	ldi	r21, 0x00	; 0
 3aa:	60 e8       	ldi	r22, 0x80	; 128
 3ac:	70 e0       	ldi	r23, 0x00	; 0
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	8c 0f       	add	r24, r28
 3b2:	57 de       	rcall	.-850    	; 0x62 <StripLights_Pixel>
        StripLights_Pixel ( pos + 2, 	RGB ( 0x10, 0x00, 0x00 ) ); // Dark red
 3b4:	40 e0       	ldi	r20, 0x00	; 0
 3b6:	50 e0       	ldi	r21, 0x00	; 0
 3b8:	60 e1       	ldi	r22, 0x10	; 16
 3ba:	70 e0       	ldi	r23, 0x00	; 0
 3bc:	82 e0       	ldi	r24, 0x02	; 2
 3be:	8c 0f       	add	r24, r28
 3c0:	50 de       	rcall	.-864    	; 0x62 <StripLights_Pixel>
    }
}

void inline StripLights_Trigger ( uint8_t t )
{
    send ( &data,  NUM_RGB_LEDS, 1 );
 3c2:	41 e0       	ldi	r20, 0x01	; 1
 3c4:	6e e0       	ldi	r22, 0x0E	; 14
 3c6:	70 e0       	ldi	r23, 0x00	; 0
 3c8:	8e e6       	ldi	r24, 0x6E	; 110
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	94 df       	rcall	.-216    	; 0x2f6 <send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ce:	2f ef       	ldi	r18, 0xFF	; 255
 3d0:	86 e7       	ldi	r24, 0x76	; 118
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	21 50       	subi	r18, 0x01	; 1
 3d6:	80 40       	sbci	r24, 0x00	; 0
 3d8:	90 40       	sbci	r25, 0x00	; 0
 3da:	e1 f7       	brne	.-8      	; 0x3d4 <Larson+0x6e>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <Larson+0x78>
 3de:	00 00       	nop

        // Using this instead of the memclear would leave a trail behind it.
        //FadeStrip(StripLights_MIN_X, StripLights_MAX_X, 6);

        // Bounce off ends of strip
        pos += dir;
 3e0:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <dir>
 3e4:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <pos>
 3e8:	92 0f       	add	r25, r18

        if ( pos < 0 ) {
 3ea:	3a f4       	brpl	.+14     	; 0x3fa <Larson+0x94>
            pos = 1;
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <pos>
            dir = -dir;
 3f2:	21 95       	neg	r18
 3f4:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <dir>
 3f8:	0a c0       	rjmp	.+20     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>

        } else
            if ( pos >= StripLights_MAX_X ) {
 3fa:	9e 30       	cpi	r25, 0x0E	; 14
 3fc:	1c f4       	brge	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>

        // Using this instead of the memclear would leave a trail behind it.
        //FadeStrip(StripLights_MIN_X, StripLights_MAX_X, 6);

        // Bounce off ends of strip
        pos += dir;
 3fe:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <pos>
 402:	05 c0       	rjmp	.+10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
            pos = 1;
            dir = -dir;

        } else
            if ( pos >= StripLights_MAX_X ) {
                pos = StripLights_MAX_X - 2;
 404:	00 93 6a 00 	sts	0x006A, r16	; 0x80006a <pos>
                dir = -dir;
 408:	21 95       	neg	r18
 40a:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <dir>

static int8_t pos = 0, dir = 1; // Position, direction of "eye"

void Larson ( uint8_t count  )
{
    for ( uint8_t j = 0; j < count; j++ ) {
 40e:	df 5f       	subi	r29, 0xFF	; 255
 410:	1d 13       	cpse	r17, r29
 412:	b3 cf       	rjmp	.-154    	; 0x37a <Larson+0x14>
            if ( pos >= StripLights_MAX_X ) {
                pos = StripLights_MAX_X - 2;
                dir = -dir;
            }
    }
}
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	1f 91       	pop	r17
 41a:	0f 91       	pop	r16
 41c:	08 95       	ret

0000041e <main>:

int main ( void )
{
    ACSR = 0;
 41e:	18 b8       	out	0x08, r1	; 8

    PORTD = 0;
 420:	12 ba       	out	0x12, r1	; 18
    PORTB = 0;
 422:	18 ba       	out	0x18, r1	; 24

    // setup leds and rgb leds
    DDRD = _BV ( 1 ) | _BV ( 2  ) | _BV ( 3  ) | _BV ( 4  ) | _BV ( 5  ) | _BV ( 6  );
 424:	8e e7       	ldi	r24, 0x7E	; 126
 426:	81 bb       	out	0x11, r24	; 17
    DDRB = _BV ( 0 ) | _BV ( 1 ) | _BV ( 2  ) | _BV ( 3  ) ;
 428:	8f e0       	ldi	r24, 0x0F	; 15
 42a:	87 bb       	out	0x17, r24	; 23

    cli();
 42c:	f8 94       	cli

    // set prescale timer
    TCCR0B |= ( 1 << CS01 ) | ( 1 << CS00 );
 42e:	83 b7       	in	r24, 0x33	; 51
 430:	83 60       	ori	r24, 0x03	; 3
 432:	83 bf       	out	0x33, r24	; 51

    // enable timer overflow interrupt
    TIMSK |= 1 << TOIE0; // left shift 1 to TOIE0 and OR with TIMSK
 434:	89 b7       	in	r24, 0x39	; 57
 436:	82 60       	ori	r24, 0x02	; 2
 438:	89 bf       	out	0x39, r24	; 57

    sei(); //start timer
 43a:	78 94       	sei

    while ( 1 ) {
		
        switch ( mode ) {
 43c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <mode>
 440:	81 30       	cpi	r24, 0x01	; 1
 442:	a9 f0       	breq	.+42     	; 0x46e <main+0x50>
 444:	18 f0       	brcs	.+6      	; 0x44c <main+0x2e>
 446:	82 30       	cpi	r24, 0x02	; 2
 448:	f1 f0       	breq	.+60     	; 0x486 <main+0x68>
 44a:	fa cf       	rjmp	.-12     	; 0x440 <main+0x22>

            case 0:
                send ( &data,  NUM_RGB_LEDS, 1 );
 44c:	41 e0       	ldi	r20, 0x01	; 1
 44e:	6e e0       	ldi	r22, 0x0E	; 14
 450:	70 e0       	ldi	r23, 0x00	; 0
 452:	8e e6       	ldi	r24, 0x6E	; 110
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	4f df       	rcall	.-354    	; 0x2f6 <send>
                Rainbow ( NUM_RGB_LEDS, effectLength );
 458:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <effectLength>
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	40 e0       	ldi	r20, 0x00	; 0
 460:	50 e0       	ldi	r21, 0x00	; 0
 462:	6e e0       	ldi	r22, 0x0E	; 14
 464:	70 e0       	ldi	r23, 0x00	; 0
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	f4 de       	rcall	.-536    	; 0x254 <Rainbow>
                break;
 46c:	e7 cf       	rjmp	.-50     	; 0x43c <main+0x1e>

            case 1:
                Larson ( 100 );
 46e:	84 e6       	ldi	r24, 0x64	; 100
 470:	7a df       	rcall	.-268    	; 0x366 <Larson>
 472:	2f ef       	ldi	r18, 0xFF	; 255
 474:	80 e7       	ldi	r24, 0x70	; 112
 476:	92 e0       	ldi	r25, 0x02	; 2
 478:	21 50       	subi	r18, 0x01	; 1
 47a:	80 40       	sbci	r24, 0x00	; 0
 47c:	90 40       	sbci	r25, 0x00	; 0
 47e:	e1 f7       	brne	.-8      	; 0x478 <main+0x5a>
 480:	00 c0       	rjmp	.+0      	; 0x482 <main+0x64>
 482:	00 00       	nop
 484:	db cf       	rjmp	.-74     	; 0x43c <main+0x1e>
                _delay_ms ( 100 );
                break;

            case 2:
                send ( &data,  NUM_RGB_LEDS, 1 );
 486:	41 e0       	ldi	r20, 0x01	; 1
 488:	6e e0       	ldi	r22, 0x0E	; 14
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	8e e6       	ldi	r24, 0x6E	; 110
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	32 df       	rcall	.-412    	; 0x2f6 <send>
                Rainbow ( NUM_RGB_LEDS, 1 );
 492:	21 e0       	ldi	r18, 0x01	; 1
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	40 e0       	ldi	r20, 0x00	; 0
 498:	50 e0       	ldi	r21, 0x00	; 0
 49a:	6e e0       	ldi	r22, 0x0E	; 14
 49c:	70 e0       	ldi	r23, 0x00	; 0
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	d8 de       	rcall	.-592    	; 0x254 <Rainbow>
                break;
 4a4:	cb cf       	rjmp	.-106    	; 0x43c <main+0x1e>

000004a6 <__divmodhi4>:
 4a6:	97 fb       	bst	r25, 7
 4a8:	07 2e       	mov	r0, r23
 4aa:	16 f4       	brtc	.+4      	; 0x4b0 <__divmodhi4+0xa>
 4ac:	00 94       	com	r0
 4ae:	06 d0       	rcall	.+12     	; 0x4bc <__divmodhi4_neg1>
 4b0:	77 fd       	sbrc	r23, 7
 4b2:	08 d0       	rcall	.+16     	; 0x4c4 <__divmodhi4_neg2>
 4b4:	2d d0       	rcall	.+90     	; 0x510 <__udivmodhi4>
 4b6:	07 fc       	sbrc	r0, 7
 4b8:	05 d0       	rcall	.+10     	; 0x4c4 <__divmodhi4_neg2>
 4ba:	3e f4       	brtc	.+14     	; 0x4ca <__divmodhi4_exit>

000004bc <__divmodhi4_neg1>:
 4bc:	90 95       	com	r25
 4be:	81 95       	neg	r24
 4c0:	9f 4f       	sbci	r25, 0xFF	; 255
 4c2:	08 95       	ret

000004c4 <__divmodhi4_neg2>:
 4c4:	70 95       	com	r23
 4c6:	61 95       	neg	r22
 4c8:	7f 4f       	sbci	r23, 0xFF	; 255

000004ca <__divmodhi4_exit>:
 4ca:	08 95       	ret

000004cc <__udivmodsi4>:
 4cc:	a1 e2       	ldi	r26, 0x21	; 33
 4ce:	1a 2e       	mov	r1, r26
 4d0:	aa 1b       	sub	r26, r26
 4d2:	bb 1b       	sub	r27, r27
 4d4:	fd 01       	movw	r30, r26
 4d6:	0d c0       	rjmp	.+26     	; 0x4f2 <__udivmodsi4_ep>

000004d8 <__udivmodsi4_loop>:
 4d8:	aa 1f       	adc	r26, r26
 4da:	bb 1f       	adc	r27, r27
 4dc:	ee 1f       	adc	r30, r30
 4de:	ff 1f       	adc	r31, r31
 4e0:	a2 17       	cp	r26, r18
 4e2:	b3 07       	cpc	r27, r19
 4e4:	e4 07       	cpc	r30, r20
 4e6:	f5 07       	cpc	r31, r21
 4e8:	20 f0       	brcs	.+8      	; 0x4f2 <__udivmodsi4_ep>
 4ea:	a2 1b       	sub	r26, r18
 4ec:	b3 0b       	sbc	r27, r19
 4ee:	e4 0b       	sbc	r30, r20
 4f0:	f5 0b       	sbc	r31, r21

000004f2 <__udivmodsi4_ep>:
 4f2:	66 1f       	adc	r22, r22
 4f4:	77 1f       	adc	r23, r23
 4f6:	88 1f       	adc	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	1a 94       	dec	r1
 4fc:	69 f7       	brne	.-38     	; 0x4d8 <__udivmodsi4_loop>
 4fe:	60 95       	com	r22
 500:	70 95       	com	r23
 502:	80 95       	com	r24
 504:	90 95       	com	r25
 506:	9b 01       	movw	r18, r22
 508:	ac 01       	movw	r20, r24
 50a:	bd 01       	movw	r22, r26
 50c:	cf 01       	movw	r24, r30
 50e:	08 95       	ret

00000510 <__udivmodhi4>:
 510:	aa 1b       	sub	r26, r26
 512:	bb 1b       	sub	r27, r27
 514:	51 e1       	ldi	r21, 0x11	; 17
 516:	07 c0       	rjmp	.+14     	; 0x526 <__udivmodhi4_ep>

00000518 <__udivmodhi4_loop>:
 518:	aa 1f       	adc	r26, r26
 51a:	bb 1f       	adc	r27, r27
 51c:	a6 17       	cp	r26, r22
 51e:	b7 07       	cpc	r27, r23
 520:	10 f0       	brcs	.+4      	; 0x526 <__udivmodhi4_ep>
 522:	a6 1b       	sub	r26, r22
 524:	b7 0b       	sbc	r27, r23

00000526 <__udivmodhi4_ep>:
 526:	88 1f       	adc	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	5a 95       	dec	r21
 52c:	a9 f7       	brne	.-22     	; 0x518 <__udivmodhi4_loop>
 52e:	80 95       	com	r24
 530:	90 95       	com	r25
 532:	bc 01       	movw	r22, r24
 534:	cd 01       	movw	r24, r26
 536:	08 95       	ret

00000538 <do_rand>:
 538:	8f 92       	push	r8
 53a:	9f 92       	push	r9
 53c:	af 92       	push	r10
 53e:	bf 92       	push	r11
 540:	cf 92       	push	r12
 542:	df 92       	push	r13
 544:	ef 92       	push	r14
 546:	ff 92       	push	r15
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	ec 01       	movw	r28, r24
 54e:	68 81       	ld	r22, Y
 550:	79 81       	ldd	r23, Y+1	; 0x01
 552:	8a 81       	ldd	r24, Y+2	; 0x02
 554:	9b 81       	ldd	r25, Y+3	; 0x03
 556:	61 15       	cp	r22, r1
 558:	71 05       	cpc	r23, r1
 55a:	81 05       	cpc	r24, r1
 55c:	91 05       	cpc	r25, r1
 55e:	21 f4       	brne	.+8      	; 0x568 <do_rand+0x30>
 560:	64 e2       	ldi	r22, 0x24	; 36
 562:	79 ed       	ldi	r23, 0xD9	; 217
 564:	8b e5       	ldi	r24, 0x5B	; 91
 566:	97 e0       	ldi	r25, 0x07	; 7
 568:	2d e1       	ldi	r18, 0x1D	; 29
 56a:	33 ef       	ldi	r19, 0xF3	; 243
 56c:	41 e0       	ldi	r20, 0x01	; 1
 56e:	50 e0       	ldi	r21, 0x00	; 0
 570:	55 d0       	rcall	.+170    	; 0x61c <__divmodsi4>
 572:	49 01       	movw	r8, r18
 574:	5a 01       	movw	r10, r20
 576:	27 ea       	ldi	r18, 0xA7	; 167
 578:	31 e4       	ldi	r19, 0x41	; 65
 57a:	40 e0       	ldi	r20, 0x00	; 0
 57c:	50 e0       	ldi	r21, 0x00	; 0
 57e:	35 d0       	rcall	.+106    	; 0x5ea <__mulsi3>
 580:	6b 01       	movw	r12, r22
 582:	7c 01       	movw	r14, r24
 584:	2c ee       	ldi	r18, 0xEC	; 236
 586:	34 ef       	ldi	r19, 0xF4	; 244
 588:	4f ef       	ldi	r20, 0xFF	; 255
 58a:	5f ef       	ldi	r21, 0xFF	; 255
 58c:	c5 01       	movw	r24, r10
 58e:	b4 01       	movw	r22, r8
 590:	2c d0       	rcall	.+88     	; 0x5ea <__mulsi3>
 592:	dc 01       	movw	r26, r24
 594:	cb 01       	movw	r24, r22
 596:	8c 0d       	add	r24, r12
 598:	9d 1d       	adc	r25, r13
 59a:	ae 1d       	adc	r26, r14
 59c:	bf 1d       	adc	r27, r15
 59e:	b7 ff       	sbrs	r27, 7
 5a0:	03 c0       	rjmp	.+6      	; 0x5a8 <do_rand+0x70>
 5a2:	01 97       	sbiw	r24, 0x01	; 1
 5a4:	a1 09       	sbc	r26, r1
 5a6:	b0 48       	sbci	r27, 0x80	; 128
 5a8:	88 83       	st	Y, r24
 5aa:	99 83       	std	Y+1, r25	; 0x01
 5ac:	aa 83       	std	Y+2, r26	; 0x02
 5ae:	bb 83       	std	Y+3, r27	; 0x03
 5b0:	9f 77       	andi	r25, 0x7F	; 127
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	ff 90       	pop	r15
 5b8:	ef 90       	pop	r14
 5ba:	df 90       	pop	r13
 5bc:	cf 90       	pop	r12
 5be:	bf 90       	pop	r11
 5c0:	af 90       	pop	r10
 5c2:	9f 90       	pop	r9
 5c4:	8f 90       	pop	r8
 5c6:	08 95       	ret

000005c8 <rand_r>:
 5c8:	b7 df       	rcall	.-146    	; 0x538 <do_rand>
 5ca:	08 95       	ret

000005cc <rand>:
 5cc:	80 e6       	ldi	r24, 0x60	; 96
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	b3 df       	rcall	.-154    	; 0x538 <do_rand>
 5d2:	08 95       	ret

000005d4 <srand>:
 5d4:	a0 e0       	ldi	r26, 0x00	; 0
 5d6:	b0 e0       	ldi	r27, 0x00	; 0
 5d8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 5dc:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 5e0:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_start+0x2>
 5e4:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_start+0x3>
 5e8:	08 95       	ret

000005ea <__mulsi3>:
 5ea:	ee 27       	eor	r30, r30
 5ec:	ff 27       	eor	r31, r31

000005ee <__mulsi3_helper>:
 5ee:	aa 27       	eor	r26, r26
 5f0:	bb 27       	eor	r27, r27
 5f2:	08 c0       	rjmp	.+16     	; 0x604 <__mulsi3_helper+0x16>
 5f4:	a2 0f       	add	r26, r18
 5f6:	b3 1f       	adc	r27, r19
 5f8:	e4 1f       	adc	r30, r20
 5fa:	f5 1f       	adc	r31, r21
 5fc:	22 0f       	add	r18, r18
 5fe:	33 1f       	adc	r19, r19
 600:	44 1f       	adc	r20, r20
 602:	55 1f       	adc	r21, r21
 604:	96 95       	lsr	r25
 606:	87 95       	ror	r24
 608:	77 95       	ror	r23
 60a:	67 95       	ror	r22
 60c:	98 f3       	brcs	.-26     	; 0x5f4 <__mulsi3_helper+0x6>
 60e:	70 40       	sbci	r23, 0x00	; 0
 610:	a9 f7       	brne	.-22     	; 0x5fc <__mulsi3_helper+0xe>
 612:	00 97       	sbiw	r24, 0x00	; 0
 614:	99 f7       	brne	.-26     	; 0x5fc <__mulsi3_helper+0xe>
 616:	bd 01       	movw	r22, r26
 618:	cf 01       	movw	r24, r30
 61a:	08 95       	ret

0000061c <__divmodsi4>:
 61c:	05 2e       	mov	r0, r21
 61e:	97 fb       	bst	r25, 7
 620:	16 f4       	brtc	.+4      	; 0x626 <__divmodsi4+0xa>
 622:	00 94       	com	r0
 624:	0f d0       	rcall	.+30     	; 0x644 <__negsi2>
 626:	57 fd       	sbrc	r21, 7
 628:	05 d0       	rcall	.+10     	; 0x634 <__divmodsi4_neg2>
 62a:	50 df       	rcall	.-352    	; 0x4cc <__udivmodsi4>
 62c:	07 fc       	sbrc	r0, 7
 62e:	02 d0       	rcall	.+4      	; 0x634 <__divmodsi4_neg2>
 630:	46 f4       	brtc	.+16     	; 0x642 <__divmodsi4_exit>
 632:	08 c0       	rjmp	.+16     	; 0x644 <__negsi2>

00000634 <__divmodsi4_neg2>:
 634:	50 95       	com	r21
 636:	40 95       	com	r20
 638:	30 95       	com	r19
 63a:	21 95       	neg	r18
 63c:	3f 4f       	sbci	r19, 0xFF	; 255
 63e:	4f 4f       	sbci	r20, 0xFF	; 255
 640:	5f 4f       	sbci	r21, 0xFF	; 255

00000642 <__divmodsi4_exit>:
 642:	08 95       	ret

00000644 <__negsi2>:
 644:	90 95       	com	r25
 646:	80 95       	com	r24
 648:	70 95       	com	r23
 64a:	61 95       	neg	r22
 64c:	7f 4f       	sbci	r23, 0xFF	; 255
 64e:	8f 4f       	sbci	r24, 0xFF	; 255
 650:	9f 4f       	sbci	r25, 0xFF	; 255
 652:	08 95       	ret

00000654 <_exit>:
 654:	f8 94       	cli

00000656 <__stop_program>:
 656:	ff cf       	rjmp	.-2      	; 0x656 <__stop_program>
